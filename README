
1) Yans
--------

So far, this code could be labeled as a prototype since it does not implement
all the features we want. We are open to outside contributions which would be 
interested on working on some of these features or other network simulation 
models.

2) Current features
-------------------

The current implementation features:
   - a UDP/IPv4 stack without multicast
   - a nice packet API
   - a complete arp module
   - an ethernet module which uses the arp module to perform address
     translation between IPv4 addresses and MAC addresses.
   - libpcap dump support at the network interface level
   - a sample application with a simple udp source and sink pair.
   - the framework to provide a POSIX environment (this is far from the
     real thing for now).
   - a port of the BSD4.4Lite TCP stack. This stack has been ported and 
     debugged but, due to licensing incompatibility reasons, we have not
     included it in the simulator distribution.
   - a set of python bindings.

3) How to build 
---------------

If you want to use the python bindings, you need:
   - python (tested with 2.3 and 2.4) (see http://www.python.org)
   - Boost (tested with 1.32.0) (see http://www.boost.org)
Otherwise, you need:
   - gcc (tested with 3.4 and 4.0.2)
   - GNU make (tested with 3.80)

All of these should be available on standard linux distributions. Make
sure you install the -devel packages associated to these packages. Fedora
Core 3 and 4 have been tested and work. (You might need to adjust the
path to the python headers in Makefile: PYTHON_INCLUDES=python_path).

Once the dependencies are installed, you can build the thing with a
simple "make" command. The binaries are build in the "bin" directory.
[mlacage@chronos yans-current]$ make
mkdir -p bin/python;
mkdir -p bin/python/yans;
mkdir -p bin/python/yans/simulator;
[....]
cp python/test-thread.py bin/python/test-thread.py
g++  -lboost_python -L./bin -lyans -shared -o bin/python/_modelsmodule.so bin/python/yans-models.o bin/python/export-thread.o
[mlacage@chronos yans-current]$ ./bin/test/main-test
Test "Thread" success.
[mlacage@chronos yans-current]$ ./bin/python/test-simulator.py
my model now=1.000000
my model now=2.000000 v1=99
my model now=3.000000 v1=98,v2=97
my member now=4.000000
my event class now=5.000000
my event class now=6.000000


4) TODO
----------

- Deserialization support
- emulation support
- complete python binding
- parallelisation support
- deployment for parallelisation through python
- 802.11 model
  
5) Contributing/Using
---------------------

If you are interested in:
  - using this simulator
  - reporting a bug
  - contributing a new model

Please, consult our website:
http://spoutnik.inria.fr/yans

