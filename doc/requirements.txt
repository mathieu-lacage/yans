Packet
------

Functional objectives:
  1) can print a human-readable view of any of the headers of any packet
  2) can generate real-life byte-serialized packets to inject in real networks
  3) easy to deserialize packets coming from a real network (this cannot be
     completely automatic but it can be made really easy).
  4) can prepend, append, and remove arbitrary headers and trailers to a packet
  5) can subclass the header/trailer classes.
  6) can generate libpcap-compatible traces.
     (see http://wiki.ethereal.com/Development/LibpcapFileFormat)
  7) attach arbitrary information to packets as they are processed in the
     network stack. This mechanism must be low-cost.

2) and 3) should be necessary for emulation, that is, the integration
of the simulator in a real network. Otherwise, it should be 
possible to run simulations without having to provide
serializing/deserializing code which should speed quite a
bit development for a lot of protocols.


Socket
------

  1) ipv4, blocking, tcp/udp
  2) send/recv/sendto/recvfrom/write/read
  3) The API should be really easy to use if
     you want to build a simple client/server
  4) non-blocking/select support

Integration of native posix applications
----------------------------------------

The goal is to be able to apply a simple sed script
to any posix application which uses threads, forks, 
sockets and files, change a few lines of code here 
and there, recompile the application as a library and
integrate it in network simulations by instantiating
multiple servers/clients on multiple hosts with 
various bound ip/port numbers.

Ideally, we should be able to do this for a server 
such as apache. This sort of integration requires:
  - posix thread re-implementation
  - posix io api re-implementation
  - posix socket api re-implementation


More complex routing applications
---------------------------------

We want to be able to offer the same treatment to
the routing daemons used under linux or the various
bsds. 

To do this, we need to identify what fancy features 
of the socket api they use and how they access the
routing tables of the underlying kernel.

